<?php
/**
 * FileUrl
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\DownloadApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: v2.0.89-89
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\DownloadApiSdk\Client\Model;

use \ArrayAccess;

/**
 * FileUrl Class Doc Comment
 *
 * @category    Class
 * @package     Softonic\DownloadApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FileUrl implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FileUrl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id_files' => 'string',
        'download_url' => 'string',
        'id_cdn' => 'string',
        'cdn_destination' => 'string',
        'filename' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id_files' => 'id_files',
        'download_url' => 'download_url',
        'id_cdn' => 'id_cdn',
        'cdn_destination' => 'cdn_destination',
        'filename' => 'filename'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id_files' => 'setIdFiles',
        'download_url' => 'setDownloadUrl',
        'id_cdn' => 'setIdCdn',
        'cdn_destination' => 'setCdnDestination',
        'filename' => 'setFilename'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id_files' => 'getIdFiles',
        'download_url' => 'getDownloadUrl',
        'id_cdn' => 'getIdCdn',
        'cdn_destination' => 'getCdnDestination',
        'filename' => 'getFilename'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const ID_CDN_AMAZONS3 = 'amazons3';
    const ID_CDN_CLOUDFRONT = 'cloudfront';
    const ID_CDN_SSC_BCN = 'ssc_bcn';
    const ID_CDN_LEASEWEB = 'leaseweb';
    const CDN_DESTINATION_PROGRAM_PRIVATE = 'program_private';
    const CDN_DESTINATION_PROGRAM_PRIVATE_STAGING = 'program_private_staging';
    const CDN_DESTINATION_PROGRAM_PRIVATE_INTEGRATION = 'program_private_integration';
    const CDN_DESTINATION_PROGRAM_PRIVATE_DEVELOPMENT = 'program_private_development';
    const CDN_DESTINATION_PROGRAM_PRIVATE_ADD_NEW_CDN = 'program_private_add_new_cdn';
    const CDN_DESTINATION_IMAGES_PUBLIC = 'images_public';
    const CDN_DESTINATION_IMAGES_PUBLIC_STAGING = 'images_public_staging';
    const CDN_DESTINATION_IMAGES_PUBLIC_INTEGRATION = 'images_public_integration';
    const CDN_DESTINATION_IMAGES_PUBLIC_DEVELOPMENT = 'images_public_development';
    const CDN_DESTINATION_RPM_PROTECTED = 'rpm_protected';
    const CDN_DESTINATION_REPORTS_PUBLIC = 'reports_public';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIdCdnAllowableValues()
    {
        return [
            self::ID_CDN_AMAZONS3,
            self::ID_CDN_CLOUDFRONT,
            self::ID_CDN_SSC_BCN,
            self::ID_CDN_LEASEWEB,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCdnDestinationAllowableValues()
    {
        return [
            self::CDN_DESTINATION_PROGRAM_PRIVATE,
            self::CDN_DESTINATION_PROGRAM_PRIVATE_STAGING,
            self::CDN_DESTINATION_PROGRAM_PRIVATE_INTEGRATION,
            self::CDN_DESTINATION_PROGRAM_PRIVATE_DEVELOPMENT,
            self::CDN_DESTINATION_PROGRAM_PRIVATE_ADD_NEW_CDN,
            self::CDN_DESTINATION_IMAGES_PUBLIC,
            self::CDN_DESTINATION_IMAGES_PUBLIC_STAGING,
            self::CDN_DESTINATION_IMAGES_PUBLIC_INTEGRATION,
            self::CDN_DESTINATION_IMAGES_PUBLIC_DEVELOPMENT,
            self::CDN_DESTINATION_RPM_PROTECTED,
            self::CDN_DESTINATION_REPORTS_PUBLIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_files'] = isset($data['id_files']) ? $data['id_files'] : null;
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['id_cdn'] = isset($data['id_cdn']) ? $data['id_cdn'] : null;
        $this->container['cdn_destination'] = isset($data['cdn_destination']) ? $data['cdn_destination'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id_files'] === null) {
            $invalid_properties[] = "'id_files' can't be null";
        }
        if (strlen($this->container['id_files']) > 40) {
            $invalid_properties[] = "invalid value for 'id_files', the character length must be smaller than or equal to 40.";
        }
        if (strlen($this->container['id_files']) < 40) {
            $invalid_properties[] = "invalid value for 'id_files', the character length must be bigger than or equal to 40.";
        }
        $allowed_values = array("amazons3", "cloudfront", "ssc_bcn", "leaseweb");
        if (!in_array($this->container['id_cdn'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'id_cdn', must be one of #{allowed_values}.";
        }
        $allowed_values = array("program_private", "program_private_staging", "program_private_integration", "program_private_development", "program_private_add_new_cdn", "images_public", "images_public_staging", "images_public_integration", "images_public_development", "rpm_protected", "reports_public");
        if (!in_array($this->container['cdn_destination'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'cdn_destination', must be one of #{allowed_values}.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id_files'] === null) {
            return false;
        }
        if (strlen($this->container['id_files']) > 40) {
            return false;
        }
        if (strlen($this->container['id_files']) < 40) {
            return false;
        }
        $allowed_values = array("amazons3", "cloudfront", "ssc_bcn", "leaseweb");
        if (!in_array($this->container['id_cdn'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("program_private", "program_private_staging", "program_private_integration", "program_private_development", "program_private_add_new_cdn", "images_public", "images_public_staging", "images_public_integration", "images_public_development", "rpm_protected", "reports_public");
        if (!in_array($this->container['cdn_destination'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_files
     * @return string
     */
    public function getIdFiles()
    {
        return $this->container['id_files'];
    }

    /**
     * Sets id_files
     * @param string $id_files SHA-1 hash that identifies a file
     * @return $this
     */
    public function setIdFiles($id_files)
    {
        if (strlen($id_files) > 40) {
            throw new \InvalidArgumentException('invalid length for $id_files when calling FileUrl., must be smaller than or equal to 40.');
        }
        if (strlen($id_files) < 40) {
            throw new \InvalidArgumentException('invalid length for $id_files when calling FileUrl., must be bigger than or equal to 40.');
        }
        $this->container['id_files'] = $id_files;

        return $this;
    }

    /**
     * Gets download_url
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     * @param string $download_url Download url
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets id_cdn
     * @return string
     */
    public function getIdCdn()
    {
        return $this->container['id_cdn'];
    }

    /**
     * Sets id_cdn
     * @param string $id_cdn CDN identifier
     * @return $this
     */
    public function setIdCdn($id_cdn)
    {
        $allowed_values = array('amazons3', 'cloudfront', 'ssc_bcn', 'leaseweb');
        if (!in_array($id_cdn, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'id_cdn', must be one of 'amazons3', 'cloudfront', 'ssc_bcn', 'leaseweb'");
        }
        $this->container['id_cdn'] = $id_cdn;

        return $this;
    }

    /**
     * Gets cdn_destination
     * @return string
     */
    public function getCdnDestination()
    {
        return $this->container['cdn_destination'];
    }

    /**
     * Sets cdn_destination
     * @param string $cdn_destination CDN destination where the file is being stored
     * @return $this
     */
    public function setCdnDestination($cdn_destination)
    {
        $allowed_values = array('program_private', 'program_private_staging', 'program_private_integration', 'program_private_development', 'program_private_add_new_cdn', 'images_public', 'images_public_staging', 'images_public_integration', 'images_public_development', 'rpm_protected', 'reports_public');
        if (!in_array($cdn_destination, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'cdn_destination', must be one of 'program_private', 'program_private_staging', 'program_private_integration', 'program_private_development', 'program_private_add_new_cdn', 'images_public', 'images_public_staging', 'images_public_integration', 'images_public_development', 'rpm_protected', 'reports_public'");
        }
        $this->container['cdn_destination'] = $cdn_destination;

        return $this;
    }

    /**
     * Gets filename
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     * @param string $filename Name of the file
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Softonic\DownloadApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Softonic\DownloadApiSdk\ObjectSerializer::sanitizeForSerialization($this));
    }
}
