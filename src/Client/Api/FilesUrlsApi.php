<?php
/**
 * FilesUrlsApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\DownloadApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.100-52
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\DownloadApiSdk\Client\Api;

use \Softonic\DownloadApiSdk\ApiClient;
use \Softonic\DownloadApiSdk\ApiException;
use \Softonic\DownloadApiSdk\Configuration;
use \Softonic\DownloadApiSdk\ObjectSerializer;

/**
 * FilesUrlsApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\DownloadApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilesUrlsApi
{
    /**
     * API Client
     *
     * @var \Softonic\DownloadApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Softonic\DownloadApiSdk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Softonic\DownloadApiSdk\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Softonic\DownloadApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Softonic\DownloadApiSdk\ApiClient $apiClient set the API client
     *
     * @return FilesUrlsApi
     */
    public function setApiClient(\Softonic\DownloadApiSdk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation findFileUrl
     *
     * List of FileUrls
     *
     * @param string $id_files SHA-1 hash that identifies a file (required)
     * @param string $country The country from where the request is being done, used to sort download URL list (required)
     * @param string $extra Associative array of parameters serialized and encoded in base64 (optional)
     * @param int $best Flag to get the best url instead of the whole list (optional)
     * @throws \Softonic\DownloadApiSdk\ApiException on non-2xx response
     * @return \Softonic\DownloadApiSdk\Client\Model\FileUrl[]
     */
    public function findFileUrl($id_files, $country, $extra = null, $best = null)
    {
        list($response) = $this->findFileUrlWithHttpInfo($id_files, $country, $extra, $best);
        return $response;
    }

    /**
     * Operation findFileUrlWithHttpInfo
     *
     * List of FileUrls
     *
     * @param string $id_files SHA-1 hash that identifies a file (required)
     * @param string $country The country from where the request is being done, used to sort download URL list (required)
     * @param string $extra Associative array of parameters serialized and encoded in base64 (optional)
     * @param int $best Flag to get the best url instead of the whole list (optional)
     * @throws \Softonic\DownloadApiSdk\ApiException on non-2xx response
     * @return array of \Softonic\DownloadApiSdk\Client\Model\FileUrl[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findFileUrlWithHttpInfo($id_files, $country, $extra = null, $best = null)
    {
        // verify the required parameter 'id_files' is set
        if ($id_files === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_files when calling findFileUrl');
        }
        if ((strlen($id_files) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_files" when calling FilesUrlsApi.findFileUrl, must be smaller than or equal to 40.');
        }
        if ((strlen($id_files) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_files" when calling FilesUrlsApi.findFileUrl, must be bigger than or equal to 40.');
        }

        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling findFileUrl');
        }
        if ((strlen($country) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling FilesUrlsApi.findFileUrl, must be smaller than or equal to 2.');
        }
        if ((strlen($country) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling FilesUrlsApi.findFileUrl, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/files/{id_files}/urls";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($extra !== null) {
            $queryParams['extra'] = $this->apiClient->getSerializer()->toQueryValue($extra);
        }
        // query params
        if ($best !== null) {
            $queryParams['best'] = $this->apiClient->getSerializer()->toQueryValue($best);
        }
        // path params
        if ($id_files !== null) {
            $resourcePath = str_replace(
                "{" . "id_files" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_files),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\DownloadApiSdk\Client\Model\FileUrl[]',
                '/files/{id_files}/urls'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Softonic\DownloadApiSdk\Client\Model\FileUrl[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\DownloadApiSdk\Client\Model\FileUrl[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
