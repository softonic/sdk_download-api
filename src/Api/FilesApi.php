<?php
/**
 * FilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\DownloadApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.96-38
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\DownloadApiSdk\Api;

use \Softonic\DownloadApiSdk\Configuration;
use \Softonic\DownloadApiSdk\ApiClient;
use \Softonic\DownloadApiSdk\ApiException;
use \Softonic\DownloadApiSdk\ObjectSerializer;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\DownloadApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilesApi
{

    /**
     * API Client
     *
     * @var \Softonic\DownloadApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Softonic\DownloadApiSdk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Softonic\DownloadApiSdk\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://download.sftapi.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Softonic\DownloadApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Softonic\DownloadApiSdk\ApiClient $apiClient set the API client
     *
     * @return FilesApi
     */
    public function setApiClient(\Softonic\DownloadApiSdk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation readFile
     *
     * Fetches a single File
     *
     * @param string $id_files SHA-1 hash that identifies a file (required)
     * @param string $country The country from where the request is being done, used to sort download URL list (required)
     * @param string $extra Associative array of parameters serialized and encoded in base64 (optional)
     * @return \Softonic\DownloadApiSdk\Model\File
     * @throws \Softonic\DownloadApiSdk\ApiException on non-2xx response
     */
    public function readFile($id_files, $country, $extra = null)
    {
        list($response) = $this->readFileWithHttpInfo($id_files, $country, $extra);
        return $response;
    }

    /**
     * Operation readFileWithHttpInfo
     *
     * Fetches a single File
     *
     * @param string $id_files SHA-1 hash that identifies a file (required)
     * @param string $country The country from where the request is being done, used to sort download URL list (required)
     * @param string $extra Associative array of parameters serialized and encoded in base64 (optional)
     * @return Array of \Softonic\DownloadApiSdk\Model\File, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\DownloadApiSdk\ApiException on non-2xx response
     */
    public function readFileWithHttpInfo($id_files, $country, $extra = null)
    {
        // verify the required parameter 'id_files' is set
        if ($id_files === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_files when calling readFile');
        }
        if ((strlen($id_files) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_files" when calling FilesApi.readFile, must be smaller than or equal to 40.');
        }
        if ((strlen($id_files) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_files" when calling FilesApi.readFile, must be bigger than or equal to 40.');
        }

        // verify the required parameter 'country' is set
        if ($country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country when calling readFile');
        }
        if ((strlen($country) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling FilesApi.readFile, must be smaller than or equal to 2.');
        }
        if ((strlen($country) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country" when calling FilesApi.readFile, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/files/{id_files}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($extra !== null) {
            $queryParams['extra'] = $this->apiClient->getSerializer()->toQueryValue($extra);
        }
        // path params
        if ($id_files !== null) {
            $resourcePath = str_replace(
                "{" . "id_files" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_files),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\DownloadApiSdk\Model\File',
                '/files/{id_files}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Softonic\DownloadApiSdk\Model\File', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\DownloadApiSdk\Model\File', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
